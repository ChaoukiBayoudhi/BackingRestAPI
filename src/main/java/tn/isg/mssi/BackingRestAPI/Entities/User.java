package tn.isg.mssi.BackingRestAPI.Entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.*;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import java.util.*;


@Getter
@Setter
@NoArgsConstructor
@RequiredArgsConstructor
@ToString
@Entity
@Table(	name = "users",
        uniqueConstraints = {
                @UniqueConstraint(columnNames = "username"),
                @UniqueConstraint(columnNames = "email")
        })

public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) //autogenerated la premiere valeur = 1++
    private Long id;
    @NotBlank
    @NonNull
    @Size(max = 20)
    private String username;
    @NonNull
    @Email
    private String email;

    @NotBlank
    @NonNull
    @Size(max = 120)
    private String password;
    private String name;

    private String familyName;




    @JsonIgnore
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(	name = "user_roles",
            joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "role_id"))
    private Set<Role> roles = new HashSet<>();


    public User(@NonNull String username, @NonNull String email, @NonNull String password, String name, String familyName,  Set<Role> roles) {
        this.username = username;
        this.email = email;
        this.password = password;
        this.name = name;
        this.familyName = familyName;
        this.roles = roles;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User user = (User) o;
        return name.equals(user.name) && familyName.equals(user.familyName) && email.equals(user.email);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, familyName, email);
    }
}


